<launch>
  <arg name="config" default="base" />
  <arg name="jackal_port" default="/dev/jackal" />
  <arg name="enable_ekf" default="$(optenv ENABLE_EKF true)"/>
  <!-- fix for oneweek project -->
  <arg name="env_runner" value="$(eval 'env_run' if not optenv('OS', 'unknown').lower().startswith('windows') else 'env_run.bat')" />
  <!-- the following seems to work too when in devel space, but not in install_isolated -->
  <!-- <arg name="env_runner" value="env_run" /> -->

  <param name="robot_description"
         command="$(find jackal_description)/scripts/$(arg env_runner)
                    $(find jackal_description)/urdf/configs/$(arg config)
                    $(find xacro)/xacro $(find jackal_description)/urdf/jackal_minimal.urdf.xacro
                    --inorder" />
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

  <node pkg="jackal_base" type="jackal_node" name="jackal_node">
    <rosparam>
      # TODO: Specify these in code rather than here.
      require:
        publishers:
          - status
          - feedback
          - imu/data_raw
          - navsat/nmea_sentence
        subscribers:
          - cmd_drive
          - wifi_connected
    </rosparam>
    <param name="port" value="$(arg jackal_port)" />
    <param name="wireless_interface" value="$(optenv JACKAL_WIRELESS_INTERFACE wlp2s0)" />
  </node>

  <!-- TODO: Eliminate this by compiling the necessary message definitions into jackal_base. -->
  <node pkg="rosserial_python" type="message_info_service.py" name="rosserial_message_info" />

  <!-- Translate Sentence messages from the MCU to NavSatFix messages -->
  <node pkg="nmea_navsat_driver" type="nmea_topic_driver" name="nmea_topic_driver" ns="navsat" />

  <node pkg="wit_ros_imu" type="wit_normal_ros.py" name="imu" output="screen"/>

  <!-- Filter raw gyro data into a usable IMU message -->
  <node pkg="imu_filter_madgwick" type="imu_filter_node" name="imu_filter">
    <rosparam file="$(eval optenv('JACKAL_MAG_CONFIG', find('jackal_base')+'/config/mag_config_default.yaml'))" />
    <rosparam>
      gain: 0.1
      zeta: 0.001
      publish_tf: false
    </rosparam>
  </node>

  <!-- Differential controller and basic localization -->
  <include file="$(find jackal_control)/launch/control.launch" />

  <!-- Teleoperation via joystick and rviz interactive markers -->
  <include file="$(find jackal_control)/launch/teleop.launch" />

  <!-- Diagnostic Aggregator for robot monitor usage -->
  <node pkg="diagnostic_aggregator" type="aggregator_node" name="diagnostic_aggregator">
    <rosparam command="load" file="$(find jackal_base)/config/diagnostic_analyzers.yaml" />
  </node>

  <!-- Add Diagnostic Analyzers for ekf localization if enabled --> 
  <group if="$(arg enable_ekf)">
    <node pkg="diagnostic_aggregator" type="add_analyzers" name="add_localization_analyzers">
      <rosparam command="load" file="$(find jackal_base)/config/localization_analyzers.yaml" />
    </node>
  </group>

  <include file="$(find velodyne_pointcloud)/launch/VLP16_points.launch"/>

  <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">

    <remap from="cloud_in" to="/velodyne_points"/>
    <remap from="scan" to="/front/scan"/>
    <rosparam>
        transform_tolerance: 0.01
        min_height: 0.25
        max_height: 0.75

        angle_min: -3.1415
        angle_max: 3.1415
        angle_increment: 0.01
        scan_time: 0.1
        range_min: 0.9
        range_max: 130
        use_inf: true
        concurrency_level: 0
    </rosparam>

  </node>

  <!--include file="$(find jackal_navigation)/launch/odom_navigation_demo.launch"/-->
</launch>
